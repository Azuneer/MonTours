import { env } from '../config/env';

// Codes postaux de Tours et agglom√©ration
const TOURS_POSTAL_CODES = [
  '37000', '37100', '37200', '37300', // Tours
  '37510', '37540', '37550', '37170', // Agglom√©ration
];

interface InseeApiResponse {
  header: {
    statut: number;
    message: string;
    total?: number;
    debut?: number;
    nombre?: number;
  };
  etablissements?: any[];
}

interface Company {
  siret: string;
  name: string;
  address: string;
  postalCode: string;
  city: string;
  nafCode: string;
  createdAt?: string;
  isActive: boolean;
}

async function fetchInseeData(query: string, nombre: number = 1000): Promise<any[]> {
  const API_KEY = env.INSEE_API_KEY;
  const baseUrl = 'https://api.insee.fr/api-sirene/3.11/siret';
  
  const url = `${baseUrl}?q=${encodeURIComponent(query)}&nombre=${nombre}`;
  
  const response = await fetch(url, {
    headers: {
      'X-INSEE-Api-Key-Integration': API_KEY,
      'Accept': 'application/json',
    },
  });

  if (!response.ok) {
    if (response.status === 404) {
      // Aucun r√©sultat trouv√©
      return [];
    }
    const error = await response.text();
    throw new Error(`API Error: ${response.status} - ${error}`);
  }

  const data: InseeApiResponse = await response.json();
  return data.etablissements || [];
}

function parseCompany(etab: any): Company {
  const uniteLegale = etab.uniteLegale || {};
  const adresse = etab.adresseEtablissement || {};
  const periode = etab.periodesEtablissement?.[0] || {};

  // Nom de l'entreprise
  const name = uniteLegale.denominationUniteLegale || 
               `${uniteLegale.prenomUsuelUniteLegale || ''} ${uniteLegale.nomUniteLegale || ''}`.trim() ||
               'Entreprise sans nom';

  // Adresse
  const address = [
    adresse.numeroVoieEtablissement,
    adresse.typeVoieEtablissement,
    adresse.libelleVoieEtablissement
  ].filter(Boolean).join(' ') || 'Adresse non renseign√©e';

  return {
    siret: etab.siret,
    name,
    address,
    postalCode: adresse.codePostalEtablissement || '',
    city: adresse.libelleCommuneEtablissement || '',
    nafCode: periode.activitePrincipaleEtablissement || uniteLegale.activitePrincipaleUniteLegale || '',
    createdAt: etab.dateCreationEtablissement,
    isActive: periode.etatAdministratifEtablissement === 'A',
  };
}

async function importInseeCompanies() {
  console.log('üöÄ Import des entreprises IT de Tours depuis l\'API INSEE\n');
  
  const API_KEY = env.INSEE_API_KEY;
  if (!API_KEY) {
    console.error('‚ùå INSEE_API_KEY not found in .env');
    process.exit(1);
  }

  console.log('‚úÖ API Key found\n');

  // Construction de la requ√™te pour tous les codes postaux
  const postalQuery = TOURS_POSTAL_CODES.map(cp => `codePostalEtablissement:${cp}`).join(' OR ');
  
  // Recherche de TOUTES les entreprises IT (codes NAF 62*) sur l'agglom√©ration
  console.log('üì° Recherche de toutes les entreprises IT (NAF 62*) actives...\n');
  
  // On utilise periode() avec wildcard 62* et filtre sur √©tablissements actifs
  const query = `(${postalQuery}) AND periode(activitePrincipaleEtablissement:62* AND etatAdministratifEtablissement:A)`;
  
  console.log('üîç Query:', query);
  console.log();

  try {
    // L'API limite √† 1000 r√©sultats par requ√™te
    // Il faudra faire de la pagination si on veut tout r√©cup√©rer
    const etablissements = await fetchInseeData(query, 1000);
    
    console.log(`‚úÖ Trouv√© ${etablissements.length} √©tablissements IT actifs\n`);

    if (etablissements.length === 0) {
      console.log('‚ö†Ô∏è  Aucune entreprise trouv√©e avec ces crit√®res');
      process.exit(0);
    }

    // Parser les donn√©es
    const companies = etablissements.map(parseCompany);
    
    // Statistiques
    console.log('üìä Statistiques:\n');
    console.log(`   Total d'√©tablissements: ${companies.length}`);
    console.log(`   √âtablissements uniques (SIRET): ${new Set(companies.map(c => c.siret)).size}`);
    console.log(`   √âtablissements actifs: ${companies.filter(c => c.isActive).length}`);
    
    // Distribution par code postal
    const byPostalCode = companies.reduce((acc, company) => {
      acc[company.postalCode] = (acc[company.postalCode] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    console.log('\nüìç Distribution par code postal:');
    Object.entries(byPostalCode)
      .sort(([, a], [, b]) => b - a)
      .forEach(([cp, count]) => {
        const city = TOURS_POSTAL_CODES.includes(cp) ? 
          (cp.startsWith('370') ? 'Tours' : 'Agglom√©ration') : 
          'Autre';
        console.log(`   ${cp} (${city}): ${count} √©tablissements`);
      });

    // Distribution par code NAF
    const byNafCode = companies.reduce((acc, company) => {
      acc[company.nafCode] = (acc[company.nafCode] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    console.log('\nüíº Distribution par code NAF:');
    Object.entries(byNafCode)
      .sort(([, a], [, b]) => b - a)
      .slice(0, 10) // Top 10
      .forEach(([naf, count]) => {
        console.log(`   ${naf}: ${count} √©tablissements`);
      });

    // Afficher quelques exemples
    console.log('\nüìã Exemples d\'entreprises trouv√©es:\n');
    companies.slice(0, 15).forEach((company, index) => {
      console.log(`${index + 1}. ${company.name}`);
      console.log(`   ${company.address}`);
      console.log(`   ${company.postalCode} ${company.city}`);
      console.log(`   NAF: ${company.nafCode} | SIRET: ${company.siret}`);
      console.log(`   Actif: ${company.isActive ? '‚úÖ' : '‚ùå'}`);
      console.log();
    });

    // Note sur la pagination
    if (etablissements.length === 1000) {
      console.log('‚ö†Ô∏è  ATTENTION : La limite de 1000 r√©sultats a √©t√© atteinte !');
      console.log('   Il y a probablement plus d\'entreprises √† r√©cup√©rer.');
      console.log('   Pour tout r√©cup√©rer, il faudra impl√©menter la pagination avec le param√®tre "curseur".\n');
    }

    console.log('‚úÖ Import termin√©!\n');
    
    // TODO: Ins√©rer dans la base de donn√©es
    console.log('üí° Prochaine √©tape: Ins√©rer les donn√©es dans PostgreSQL');
    console.log('   - Cr√©er une table "companies"');
    console.log('   - Mapper les donn√©es vers le sch√©ma');
    console.log('   - G√©rer les doublons (upsert sur SIRET)');
    console.log('   - Ajouter la g√©olocalisation (lat/lng)\n');

    // Retourner les donn√©es pour utilisation ult√©rieure
    return companies;
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'import:', error);
    process.exit(1);
  }
}

// Lancer l'import
importInseeCompanies();
